{"ast":null,"code":"import axios from 'axios';\n\n// API base URL\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token && config.headers) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Handle response errors\napi.interceptors.response.use(response => response, error => {\n  // Handle 401 Unauthorized errors\n  if (error.response && error.response.status === 401) {\n    // Clear token and redirect to login if not already there\n    localStorage.removeItem('token');\n    if (window.location.pathname !== '/login') {\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  register: (name, email, password) => api.post('/auth/register', {\n    name,\n    email,\n    password\n  }),\n  login: (email, password) => api.post('/auth/login', {\n    email,\n    password\n  }),\n  googleLogin: idToken => api.post('/auth/google', {\n    idToken\n  }),\n  getProfile: () => api.get('/auth/profile')\n};\n\n// Projects API\nexport const projectsAPI = {\n  getProjects: () => api.get('/projects'),\n  getProject: projectId => api.get(`/projects/${projectId}`),\n  createProject: (title, description) => api.post('/projects', {\n    title,\n    description\n  }),\n  updateProject: (projectId, title, description) => api.put(`/projects/${projectId}`, {\n    title,\n    description\n  }),\n  deleteProject: projectId => api.delete(`/projects/${projectId}`),\n  addMember: (projectId, email, role) => api.post(`/projects/${projectId}/members`, {\n    email,\n    role\n  }),\n  removeMember: (projectId, userId) => api.delete(`/projects/${projectId}/members/${userId}`),\n  updateStatuses: (projectId, statuses) => api.put(`/projects/${projectId}/statuses`, {\n    statuses\n  })\n};\n\n// Tasks API\nexport const tasksAPI = {\n  getProjectTasks: projectId => api.get(`/tasks/project/${projectId}`),\n  getTask: taskId => api.get(`/tasks/${taskId}`),\n  createTask: task => api.post('/tasks', task),\n  updateTask: (taskId, task) => api.put(`/tasks/${taskId}`, task),\n  deleteTask: taskId => api.delete(`/tasks/${taskId}`),\n  updateTaskStatus: (taskId, status) => api.put(`/tasks/${taskId}/status`, {\n    status\n  }),\n  addComment: (taskId, text) => api.post(`/tasks/${taskId}/comments`, {\n    text\n  })\n};\n\n// Automations API\nexport const automationsAPI = {\n  getProjectAutomations: projectId => api.get(`/automations/project/${projectId}`),\n  createAutomation: automation => api.post('/automations', automation),\n  updateAutomation: (automationId, automation) => api.put(`/automations/${automationId}`, automation),\n  deleteAutomation: automationId => api.delete(`/automations/${automationId}`)\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","removeItem","window","location","pathname","href","authAPI","register","name","email","password","post","login","googleLogin","idToken","getProfile","get","projectsAPI","getProjects","getProject","projectId","createProject","title","description","updateProject","put","deleteProject","delete","addMember","role","removeMember","userId","updateStatuses","statuses","tasksAPI","getProjectTasks","getTask","taskId","createTask","task","updateTask","deleteTask","updateTaskStatus","addComment","text","automationsAPI","getProjectAutomations","createAutomation","automation","updateAutomation","automationId","deleteAutomation"],"sources":["/Users/pratyksh/Desktop/jaideep MERN/taskboard-pro/client/src/services/api.ts"],"sourcesContent":["import axios, { AxiosRequestConfig } from 'axios';\n\n// API base URL\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add token to requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token && config.headers) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Handle response errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    // Handle 401 Unauthorized errors\n    if (error.response && error.response.status === 401) {\n      // Clear token and redirect to login if not already there\n      localStorage.removeItem('token');\n      if (window.location.pathname !== '/login') {\n        window.location.href = '/login';\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Auth API\nexport const authAPI = {\n  register: (name: string, email: string, password: string) => \n    api.post('/auth/register', { name, email, password }),\n  \n  login: (email: string, password: string) => \n    api.post('/auth/login', { email, password }),\n  \n  googleLogin: (idToken: string) => \n    api.post('/auth/google', { idToken }),\n  \n  getProfile: () => \n    api.get('/auth/profile')\n};\n\n// Projects API\nexport const projectsAPI = {\n  getProjects: () => \n    api.get('/projects'),\n  \n  getProject: (projectId: string) => \n    api.get(`/projects/${projectId}`),\n  \n  createProject: (title: string, description: string) => \n    api.post('/projects', { title, description }),\n  \n  updateProject: (projectId: string, title: string, description: string) => \n    api.put(`/projects/${projectId}`, { title, description }),\n  \n  deleteProject: (projectId: string) => \n    api.delete(`/projects/${projectId}`),\n  \n  addMember: (projectId: string, email: string, role: string) => \n    api.post(`/projects/${projectId}/members`, { email, role }),\n  \n  removeMember: (projectId: string, userId: string) => \n    api.delete(`/projects/${projectId}/members/${userId}`),\n  \n  updateStatuses: (projectId: string, statuses: any[]) => \n    api.put(`/projects/${projectId}/statuses`, { statuses })\n};\n\n// Tasks API\nexport const tasksAPI = {\n  getProjectTasks: (projectId: string) => \n    api.get(`/tasks/project/${projectId}`),\n  \n  getTask: (taskId: string) => \n    api.get(`/tasks/${taskId}`),\n  \n  createTask: (task: {\n    title: string;\n    description?: string;\n    project: string;\n    status?: string;\n    assignee?: string;\n    dueDate?: Date;\n    priority?: string;\n  }) => \n    api.post('/tasks', task),\n  \n  updateTask: (taskId: string, task: {\n    title?: string;\n    description?: string;\n    status?: string;\n    assignee?: string;\n    dueDate?: Date;\n    priority?: string;\n  }) => \n    api.put(`/tasks/${taskId}`, task),\n  \n  deleteTask: (taskId: string) => \n    api.delete(`/tasks/${taskId}`),\n  \n  updateTaskStatus: (taskId: string, status: string) => \n    api.put(`/tasks/${taskId}/status`, { status }),\n  \n  addComment: (taskId: string, text: string) => \n    api.post(`/tasks/${taskId}/comments`, { text })\n};\n\n// Automations API\nexport const automationsAPI = {\n  getProjectAutomations: (projectId: string) => \n    api.get(`/automations/project/${projectId}`),\n  \n  createAutomation: (automation: {\n    project: string;\n    name: string;\n    description?: string;\n    trigger: {\n      type: string;\n      conditions: any;\n    };\n    action: {\n      type: string;\n      details: any;\n    };\n  }) => \n    api.post('/automations', automation),\n  \n  updateAutomation: (automationId: string, automation: {\n    name?: string;\n    description?: string;\n    active?: boolean;\n    trigger?: {\n      type: string;\n      conditions: any;\n    };\n    action?: {\n      type: string;\n      details: any;\n    };\n  }) => \n    api.put(`/automations/${automationId}`, automation),\n  \n  deleteAutomation: (automationId: string) => \n    api.delete(`/automations/${automationId}`)\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}