{"ast":null,"code":"import axios from'axios';// API base URL\nconst API_URL=process.env.REACT_APP_API_URL||'http://localhost:5000/api';// Create axios instance\nconst api=axios.create({baseURL:API_URL,headers:{'Content-Type':'application/json'}});// Add token to requests\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token&&config.headers){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>Promise.reject(error));// Handle response errors\napi.interceptors.response.use(response=>response,error=>{// Handle 401 Unauthorized errors\nif(error.response&&error.response.status===401){// Clear token and redirect to login if not already there\nlocalStorage.removeItem('token');if(window.location.pathname!=='/login'){window.location.href='/login';}}return Promise.reject(error);});// Auth API\nexport const authAPI={register:(name,email,password)=>api.post('/auth/register',{name,email,password}),login:(email,password)=>api.post('/auth/login',{email,password}),googleLogin:idToken=>api.post('/auth/google',{idToken}),getProfile:()=>api.get('/auth/profile')};// Projects API\nexport const projectsAPI={getProjects:()=>api.get('/projects'),getProject:projectId=>api.get(\"/projects/\".concat(projectId)),createProject:(title,description)=>api.post('/projects',{title,description}),updateProject:(projectId,title,description)=>api.put(\"/projects/\".concat(projectId),{title,description}),deleteProject:projectId=>api.delete(\"/projects/\".concat(projectId)),addMember:(projectId,email,role)=>api.post(\"/projects/\".concat(projectId,\"/members\"),{email,role}),removeMember:(projectId,userId)=>api.delete(\"/projects/\".concat(projectId,\"/members/\").concat(userId)),updateStatuses:(projectId,statuses)=>api.put(\"/projects/\".concat(projectId,\"/statuses\"),{statuses})};// Tasks API\nexport const tasksAPI={getProjectTasks:projectId=>api.get(\"/tasks/project/\".concat(projectId)),getTask:taskId=>api.get(\"/tasks/\".concat(taskId)),createTask:task=>api.post('/tasks',task),updateTask:(taskId,task)=>api.put(\"/tasks/\".concat(taskId),task),deleteTask:taskId=>api.delete(\"/tasks/\".concat(taskId)),updateTaskStatus:(taskId,status)=>api.put(\"/tasks/\".concat(taskId,\"/status\"),{status}),addComment:(taskId,text)=>api.post(\"/tasks/\".concat(taskId,\"/comments\"),{text})};// Automations API\nexport const automationsAPI={getProjectAutomations:projectId=>api.get(\"/automations/project/\".concat(projectId)),createAutomation:automation=>api.post('/automations',automation),updateAutomation:(automationId,automation)=>api.put(\"/automations/\".concat(automationId),automation),deleteAutomation:automationId=>api.delete(\"/automations/\".concat(automationId))};export default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","error","Promise","reject","response","status","removeItem","window","location","pathname","href","authAPI","register","name","email","password","post","login","googleLogin","idToken","getProfile","get","projectsAPI","getProjects","getProject","projectId","createProject","title","description","updateProject","put","deleteProject","delete","addMember","role","removeMember","userId","updateStatuses","statuses","tasksAPI","getProjectTasks","getTask","taskId","createTask","task","updateTask","deleteTask","updateTaskStatus","addComment","text","automationsAPI","getProjectAutomations","createAutomation","automation","updateAutomation","automationId","deleteAutomation"],"sources":["/Users/pratyksh/Desktop/jaideep MERN/taskboard-pro/client/src/services/api.ts"],"sourcesContent":["import axios, { AxiosRequestConfig } from 'axios';\n\n// API base URL\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add token to requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token && config.headers) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Handle response errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    // Handle 401 Unauthorized errors\n    if (error.response && error.response.status === 401) {\n      // Clear token and redirect to login if not already there\n      localStorage.removeItem('token');\n      if (window.location.pathname !== '/login') {\n        window.location.href = '/login';\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Auth API\nexport const authAPI = {\n  register: (name: string, email: string, password: string) => \n    api.post('/auth/register', { name, email, password }),\n  \n  login: (email: string, password: string) => \n    api.post('/auth/login', { email, password }),\n  \n  googleLogin: (idToken: string) => \n    api.post('/auth/google', { idToken }),\n  \n  getProfile: () => \n    api.get('/auth/profile')\n};\n\n// Projects API\nexport const projectsAPI = {\n  getProjects: () => \n    api.get('/projects'),\n  \n  getProject: (projectId: string) => \n    api.get(`/projects/${projectId}`),\n  \n  createProject: (title: string, description: string) => \n    api.post('/projects', { title, description }),\n  \n  updateProject: (projectId: string, title: string, description: string) => \n    api.put(`/projects/${projectId}`, { title, description }),\n  \n  deleteProject: (projectId: string) => \n    api.delete(`/projects/${projectId}`),\n  \n  addMember: (projectId: string, email: string, role: string) => \n    api.post(`/projects/${projectId}/members`, { email, role }),\n  \n  removeMember: (projectId: string, userId: string) => \n    api.delete(`/projects/${projectId}/members/${userId}`),\n  \n  updateStatuses: (projectId: string, statuses: any[]) => \n    api.put(`/projects/${projectId}/statuses`, { statuses })\n};\n\n// Tasks API\nexport const tasksAPI = {\n  getProjectTasks: (projectId: string) => \n    api.get(`/tasks/project/${projectId}`),\n  \n  getTask: (taskId: string) => \n    api.get(`/tasks/${taskId}`),\n  \n  createTask: (task: {\n    title: string;\n    description?: string;\n    project: string;\n    status?: string;\n    assignee?: string;\n    dueDate?: Date;\n    priority?: string;\n  }) => \n    api.post('/tasks', task),\n  \n  updateTask: (taskId: string, task: {\n    title?: string;\n    description?: string;\n    status?: string;\n    assignee?: string;\n    dueDate?: Date;\n    priority?: string;\n  }) => \n    api.put(`/tasks/${taskId}`, task),\n  \n  deleteTask: (taskId: string) => \n    api.delete(`/tasks/${taskId}`),\n  \n  updateTaskStatus: (taskId: string, status: string) => \n    api.put(`/tasks/${taskId}/status`, { status }),\n  \n  addComment: (taskId: string, text: string) => \n    api.post(`/tasks/${taskId}/comments`, { text })\n};\n\n// Automations API\nexport const automationsAPI = {\n  getProjectAutomations: (projectId: string) => \n    api.get(`/automations/project/${projectId}`),\n  \n  createAutomation: (automation: {\n    project: string;\n    name: string;\n    description?: string;\n    trigger: {\n      type: string;\n      conditions: any;\n    };\n    action: {\n      type: string;\n      details: any;\n    };\n  }) => \n    api.post('/automations', automation),\n  \n  updateAutomation: (automationId: string, automation: {\n    name?: string;\n    description?: string;\n    active?: boolean;\n    trigger?: {\n      type: string;\n      conditions: any;\n    };\n    action?: {\n      type: string;\n      details: any;\n    };\n  }) => \n    api.put(`/automations/${automationId}`, automation),\n  \n  deleteAutomation: (automationId: string) => \n    api.delete(`/automations/${automationId}`)\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}